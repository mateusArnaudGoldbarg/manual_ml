/******************************************************************************

                              Online C++ Compiler.
               Code, Compile, Run and Debug C++ program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/

#include <iostream>
#include <math.h>
#include <assert.h>
using namespace std;

void softmax(float* input, size_t size) {

	assert(0 <= size <= sizeof(input) / sizeof(double));

	int i;
	double m, sum, constant;

	m = -INFINITY;
	for (i = 0; i < size; ++i) {
		if (m < input[i]) {
			m = input[i];
		}
	}

	sum = 0.0;
	for (i = 0; i < size; ++i) {
		sum += exp(input[i] - m);
	}

	constant = m + log(sum);
	for (i = 0; i < size; ++i) {
		input[i] = exp(input[i] - constant);
	}

}

int main()
{
    // my model
    float dense1[4][10] = {{0.6687432 , -0.61946446,  0.3925613 , -0.6256361 , -0.15233004, -0.25770617, -0.22145933, -0.03116034, -0.07213708,  0.08552536},
    {-0.15384062, -0.01874369,  0.23976368, -0.4667834 ,  0.19747084, 0.26759177, -0.10567456,  0.65256625,  0.51775897,  0.5700992},
    {-0.42176914, -0.21216655,  0.47330087, -0.38930824, -0.5198719 , -0.38937613, -0.37584838, -0.37032893,  0.26524904, -0.13616402},
    {-0.7625424 ,  0.5622983 , -0.00712274,  0.41868675,  0.29586202, -0.36771357, -0.37170506,  0.14083412,  0.38264477, -0.8290541}};
    
    float bias1[10] = {0.24006544,  0.        ,  0.16063713,  0.        ,  0.        , 0.        ,  0.        ,  0.2148306 , -0.0584112 ,  0.2479922};
    
    float dense2[10][10] = {{-0.29739213, -0.22500926, -0.10855037,  0.7298434 , -0.53956246, -0.5398267 , -0.01083072, -0.26863214,  0.01156667, -0.18011901},
    {0.31247383, -0.2321465 ,  0.39591742,  0.20740545, -0.05782652, 0.25544977,  0.24316663,  0.31299895,  0.35384   ,  0.1810934},
    {0.24080151,  0.17036909, -0.53536105,  0.15171672, -0.42196497, 0.32947737,  0.5429214 ,  0.05955783,  0.17480844,  0.18949954},
    {0.11729097,  0.31882328, -0.3543349 , -0.5272235 , -0.04200405, -0.51716244, -0.35328197, -0.16308609,  0.11375809, -0.33453983},
    {-0.25483695,  0.47168303,  0.1541977 ,  0.13094258, -0.08729535, -0.07018867,  0.07240307, -0.09452295, -0.21073556,  0.11810219},
    {0.34700984, -0.47711313, -0.25615066,  0.4067564 , -0.5387563 , 0.13295674,  0.29907662,  0.44826865, -0.20021334, -0.46627754},
    {-0.03119129, -0.25777385,  0.23519677, -0.35060978,  0.10879928, 0.52065694,  0.30564505, -0.39896673, -0.46277663, -0.11475655},
    {-0.63703847,  0.29780436, -0.0149141 ,  0.29069972,  0.10697639, -0.80365217, -0.0464714 ,  0.09054808,  0.63129264,  0.05229133},
    {0.4513428 , -0.48679972, -0.24581546,  0.02314935, -0.33189362, 0.2237683 , -0.16999945,  0.43483242, -0.38344556, -0.41985488},
    {-0.06954266, -0.43285164, -0.46618026, -0.01503766, -0.5291566 , -0.6901622 , -0.26706317,  0.64305425,  0.7389528 , -0.51186097}};
    
    float bias2[10] = {0.22483708,  0.        ,  0.        ,  0.05908684,  0.        , -0.13067733,  0.09735662, -0.08622272,  0.18277514, -0.01721832};
    
    
    float dense3[10][3] = {{-1.05251837e+00,  2.67649651e-01,  6.58927143e-01},
    {-2.92397201e-01, -3.27374756e-01, -6.42964125e-01},
    {-7.23392963e-02,  4.92245674e-01, -5.95382810e-01},
    {8.12956512e-01,  1.22013241e-01,  1.60962027e-02},
    {2.07023084e-01,  3.44308615e-02,  6.62096977e-01},
    {-4.95905906e-01, -5.09886980e-01,  5.76161146e-01},
    {-5.66885412e-01,  6.03131890e-01, -6.05843186e-01},
    {2.81837851e-01, -5.21260142e-01,  2.97065705e-01},
    {5.47878027e-01,  1.97345495e-01, -7.20538557e-01},
    {-4.90674287e-01,  1.04821526e-01,  2.49630335e-04}};
    
    float bias3[3] = {0.08492658,  0.08103085, -0.2379903};
    
    
    
    //input
    float input[4] = {5.7, 2.6, 3.5, 1.0};
    
    //neurons
    float n1[10] = {0,0,0,0,0,0,0,0,0,0};
    float n2[10] = {0,0,0,0,0,0,0,0,0,0};
    float n3[10] = {0,0,0};
    
    //forward
    //first layer
    for(int i=0;i<4;i++){
        for(int j=0;j<10;j++){
            n1[j] += input[i]*dense1[i][j];
        }
    }
    
    //add bias
    for(int i=0;i<10;i++){
        n1[i]+=bias1[i];
    }
    
    //Relu
    for(int i=0;i<10;i++){
        if(n1[i]<0){
            n1[i] = 0;
        }
    }
    
    
    
    
    
    //second layer
    for(int i=0;i<10;i++){
        for(int j=0;j<10;j++){
            n2[j] += n1[i]*dense2[i][j];
        }
    }
    
    
    
    //add bias
    for(int i=0;i<10;i++){
        n2[i]+=bias2[i];
    }
    
    //Relu
    for(int i=0;i<10;i++){
        if(n2[i]<0){
            n2[i] =0;
        }
    }
    
    
    
    //output layer
    for(int i=0;i<3;i++){
        for(int j=0;j<10;j++){
            n3[i] += n2[j]*dense3[j][i];
        }
    }
    
    //add bias
    for(int i=0;i<3;i++){
        n3[i]+=bias3[i];
    }
    
    //softmax
    
    float p1 = exp(n3[0])/(exp(n3[0])+exp(n3[1])+exp(n3[2]));
    float p2 = exp(n3[1])/(exp(n3[0])+exp(n3[1])+exp(n3[2]));
    float p3 = exp(n3[2])/(exp(n3[0])+exp(n3[1])+exp(n3[2]));
    
    cout<<p1*100<<"%"<<endl;
    cout<<p2*100<<"%"<<endl;
    cout<<p3*100<<"%"<<endl;
    
    if(p3>p2 && p3>p2){
        cout<<"Iris-virginica"<<endl;
    }
    if(p1>p2 && p1>p3){
        cout <<"Iris-setosa"<<endl;
    }
    else{
        cout <<"Iris-versicolor"<<endl;
    }
    
    return 0;
}
